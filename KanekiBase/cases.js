require('./configurar')

const { baileys, proto, generateWAMessageFromContent, getContentType } = require("@whiskeysockets/baileys")

const { getGroupAdmins, processo, fetchJson } = require("./dados/lib/fun√ß√µes.js")

const { smsg, formatp, tanggal, formatDate, getTime, isUrl, await, sleep, clockString, msToDate, sort, toNumber, enumGetKey, getBuffer, jsonformat, delay, format, logic, generateProfilePicture, parseMention, getRandom, pickRandom, reSize } = require('./dados/lib/myfunc')

const { exec } = require("child_process")

const cheerio = require("cheerio")

const chalk = require("chalk")

const util = require("util")

const jsobfus = require('javascript-obfuscator')

const axios = require("axios")

const fs = require("fs")

const moment = require('moment-timezone')

const cor = '\x1b[91m%s\x1b[0m';

const verde = '\x1b[32m%s\x1b[0m';

//Database
global.db.data = JSON.parse(fs.readFileSync('./dados/src/database.json'))
if (global.db.data) global.db.data = {
users: {},
group: {},
chats: {},
database: {},
settings: {},
donate: {},
others: {},
sticker: {},
...(global.db.data || {})
}

moment.tz.setDefault("America/Sao_Paulo").locale("id")

module.exports = async (venom, mek, store, msg) => {

try {

const type = getContentType(msg.message)

const content = JSON.stringify(msg.message)

const from = msg.key.remoteJid

const fatkuns = (msg.quoted || msg)

const quoted = (fatkuns.mtype == 'buttonsMessage') ? fatkuns[Object.keys(fatkuns)[1]] : (fatkuns.mtype == 'templateMessage') ? fatkuns.hydratedTemplate[Object.keys(fatkuns.hydratedTemplate)[1]] : (fatkuns.mtype == 'product') ? fatkuns[Object.keys(fatkuns)[0]] : msg.quoted ? msg.quoted : msg

const body = (type === 'conversation' && msg.message.conversation) ? msg.message.conversation : (type == 'imageMessage') && msg.message.imageMessage.caption ? msg.message.imageMessage.caption : (type == 'documentMessage') && msg.message.documentMessage.caption ? msg.message.documentMessage.caption : (type == 'videoMessage') && msg.message.videoMessage.caption ? msg.message.videoMessage.caption : (type == 'extendedTextMessage') && msg.message.extendedTextMessage.text ? msg.message.extendedTextMessage.text : (type == 'buttonsResponseMessage' && msg.message.buttonsResponseMessage.selectedButtonId) ? msg.message.buttonsResponseMessage.selectedButtonId : (type == 'templateButtonReplyMessage') && msg.message.templateButtonReplyMessage.selectedId ? msg.message.templateButtonReplyMessage.selectedId : ''

const prefixo = prefixos 

const isCmd = body.startsWith(prefixo)

const comando = body.replace(prefixo, '').trim().split(/ +/).shift().toLowerCase()    

const args = body.trim().split(/ +/).slice(1)

const NomeBot = venom.user.id.split(':')[0]

const sender = msg.key.fromMe ? (venom.user.id.split(':')[0]+'@s.whatsapp.net' || venom.user.id) : (msg.key.participant || msg.key.remoteJid)

const isGroup = from.endsWith('@g.us')

const groupMetadata = isGroup ? await venom.groupMetadata(from).catch(e => {}) : ''

const groupName = isGroup ? groupMetadata.subject : ''

const participants = isGroup ? await groupMetadata.participants : ''

const groupAdmins = isGroup ? await participants.filter(v => v.admin !== null).map(v => v.id) : ''

const isBotAdmins = isGroup ? groupAdmins.includes(NomeBot) : false

const isAdmins = isGroup ? groupAdmins.includes(sender) : false

const senderNumber = sender.split('@')[0]

const UsuarioVip = JSON.parse(fs.readFileSync('./dados/vip/usuariosVIP.json'))

const isVip = UsuarioVip.includes(sender)

const nome = msg.pushName || `${senderNumber}`

const isBot = NomeBot.includes(senderNumber)

const isDono = numerodono.includes(senderNumber) || isBot

const mentionUser = [...new Set([...(msg.mentionedJid || []), ...(msg.quoted ? [msg.quoted.sender] : [])])]

const mentionByTag = type == 'extendedTextMessage' && msg.message.extendedTextMessage.contextInfo != null ? msg.message.extendedTextMessage.contextInfo.mentionedJid : []

const mentionByReply = type == 'extendedTextMessage' && msg.message.extendedTextMessage.contextInfo != null ? msg.message.extendedTextMessage.contextInfo.participant || '' : ''

const text = q = args.join(" ")


const budy = (typeof text == 'string' ? text : '')

const mime = (quoted.msg || quoted).mimetype || ''

const qmsg = (quoted.msg || quoted)

const numberQuery = q.replace(new RegExp('[()+-/ +/]', 'gi'), '') + '@s.whatsapp.net'

const usernya = mentionByReply ? mentionByReply : mentionByTag[0]

const Input = mentionByTag[0] ? mentionByTag[0] : mentionByReply ? mentionByReply : q ? numberQuery : false

const client = venom;

// Fun√ß√£o para adicionar um usu√°rio VIP
function adicionarUsuarioVIP(usuario) {
  // Carrega os dados atuais, se existirem
  let usuariosVIP = [];
  try {
    const dados = fs.readFileSync('./dados/vip/usuariosVIP.json');
    usuariosVIP = JSON.parse(dados);
  } catch (error) {
    // Arquivo ainda n√£o existe ou est√° vazio
  }

  // Adiciona o usu√°rio √† lista de usu√°rios VIP
  if (!usuariosVIP.includes(usuario)) {
    usuariosVIP.push(usuario);
    fs.writeFileSync('./dados/vip/usuariosVIP.json', JSON.stringify(usuariosVIP, null, 2));
    responder(`_Usu√°rio ${usuario.replace(/[^0-9]/g, '')} adicionado como VIP com sucesso ‚úì_`);
  } else {
    responder(`_Este Usu√°rio ${usuario.replace(/[^0-9]/g, '')} j√° √© VIP ‚àö_`);
  }
}

// Fun√ß√£o para deletar um usu√°rio VIP
function deletarUsuarioVIP(usuario) {
  let usuariosVIP = [];
  try {
    const dados = fs.readFileSync('./dados/vip/usuariosVIP.json');
    usuariosVIP = JSON.parse(dados);
    const index = usuariosVIP.indexOf(usuario);
    if (index !== -1) {
      usuariosVIP.splice(index, 1);
      fs.writeFileSync('./dados/vip/usuariosVIP.json', JSON.stringify(usuariosVIP, null, 2));
      responder(`_Usu√°rio ${usuario.replace(/[^0-9]/g, '')} removido dos VIPs com sucesso ‚úì`);
    } else {
      responder(`_Usu√°rio ${usuario.replace(/[^0-9]/g, '')} n√£o encontrado na lista de VIPs ‚úì_u`);
    }
  } catch (error) {
    responder('Erro ao acessar o arquivo de usu√°rios VIP.');
  }
}

const comprarbot = `
*Domine a Competi√ß√£o: Nosso Bot Personalizado* ü§ñüíº

Procurando um bot que *desafie os limites*? Nosso bot personalizado n√£o s√≥ automatiza suas tarefas, mas tamb√©m pode **enviar travas e crashes** para usu√°rios, dominando o campo da competi√ß√£o. Personalizado para suas necessidades, ele garante resultados sem precedentes. üí•üíº Transforme seu jogo hoje mesmo!

Entre em contato para saber mais: https://wa.me/559784412501 üìûüìß
`

const painel = `
_*üîéüìëCONSULTA ONLINE ESPECIALIZADA EM DADOSüìëüîé*_

_Est√° em busca de informa√ß√µes precisas e confi√°veis? Conte com nossa consultoria online para obter dados detalhados sobre:_

*NOME 1*
*NOME 2*
*CPF*
*CPF1*
*CPF2*
*CPF3*
*CPF4*
*SCORE*
*TELEFONE 1*
*TELEFONE 2*
*BIN*
*BANK*
*BANKLIST*
*FERIADOS*
*CEP*
*CNPJ*
*DDD*
*PLACA 1*
*PLACA 2*
*LOCALIZA√á√ÉO IP*
*M√ÉE*
*PARENTES*
*VIZINHOS*
*BENEF√çCIOS*
*E-MAIL*
*SITE*

_*‚ÑπÔ∏è Com nossa plataforma, tenha acesso a detalhes como localiza√ß√£o, telefones associados, BIN, bancos relacionados, feriados, CEP, CNPJ, DDD, placas de ve√≠culos e at√© mesmo IPs.*_

_*üîé Al√©m disso, oferecemos insights sobre m√£e, parentes, vizinhos e benef√≠cios relacionados. Quer saber mais sobre o hist√≥rico de um e-mail ou site? N√≥s te ajudamos!*_

_*‚úÖ Garantimos seguran√ßa e privacidade em todas as consultas. Entre em contato conosco e descubra como podemos ajudar voc√™. Vem PV para mais informa√ß√µes!*_

*_https://wa.me/559784412501_*`

const website = `
üåê Conhe√ßa a VenomWeb site

para as melhores APIs de bots do WhatsApp! Desde banir usu√°rios at√© consultas vitais, nossas APIs oferecem solu√ß√µes completas. Com banimento, disponibilidade para n√∫mero, desbanimento, consultas, downloads, uploads de c√≥digo, gera√ß√£o de conte√∫do e cria√ß√£o de logotipos - temos tudo! Acesso seguro com apikey.

site: https://venomweb.site

Contate-nos agora para adquirir! üöÄ

Contato para comprar sua apikey: https://wa.me/559784412501`

//Horas
const hora1 = moment.tz('America/Sao_Paulo').format('dddd, DD MMMM YYYY')

const hora2  = moment.tz('America/Sao_Paulo').format('HH : mm : ss')

const tempo2 = moment().tz('America/Sao_Paulo').format('HH:mm:ss')

if(tempo2 < "23:59:00"){
var dizendoTempo = 'Boa noite üèôÔ∏è'
}
if(tempo2 < "19:00:00"){
var dizendoTempo = 'Boa noite  üåÜ'
}
if(tempo2 < "18:00:00"){
var dizendoTempo = 'Boa tarde üåá'
}
if(tempo2 < "15:00:00"){
var dizendoTempo = 'Boa tarde üå§Ô∏è'
}
if(tempo2 < "10:00:00"){
var dizendoTempo = 'Bom dia üåÑ'
}
if(tempo2 < "05:00:00"){
var dizendoTempo = 'Bom Amanhecer üåÜ'
}
if(tempo2 < "03:00:00"){
var dizendoTempo = 'Boa Madrugada üåÉ'
}

const getBuffer = async (url, options) => {
	try {
		options ? options : {}
		const res = await axios({
			method: "get",
			url,
			headers: {
'DNT': 1,
'Upgrade-Insecure-Request': 1
			},
			...options,
			responseType: 'arraybuffer'
		})
		return res.data
	} catch (err) {
		return err
	}
}

const parseMention = (text = '') => {
return [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net')
}

const isUrl = (url) => {
return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%.+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%+.~#?&/=]*)/, 'gi'))
}

async function criptografia(query) {
return new Promise((resolve, reject) => {
try {
const ofusca√ß√£oResultado = jsobfus.obfuscate(query,
{
compact: false,
controlFlowFlattening: true,
controlFlowFlatteningThreshold: 1,
numbersToExpressions: true,
simplify: true, 
stringArrayShuffle: true,
splitStrings: true,
stringArrayThreshold: 1
}
);
const result = {
status: 200,
author: `Venom Mods`,
result: ofusca√ß√£oResultado.getObfuscatedCode()
}
resolve(result)
} catch (e) {
reject(e)
}
})
}

const responder = (teks) => {
venom.sendMessage(from, { text: teks, contextInfo:{"externalAdReply": {"title": nomebot,"body": `üëãüèª Ol√° ${nome}`, "previewType": "PHOTO","thumbnail": thumb,"sourceUrl": `https://youtube.com/@VenomModsss`}}}, { quoted: msg})}

try {
let isNumber = x => typeof x === 'number' && !isNaN(x)
let user = global.db.data.users[sender]
if (typeof user !== 'object') global.db.data.users[sender] = {}
if (user) {
if (!isNumber(user.afkTime)) user.afkTime = -1
if (!('afkReason' in user)) user.afkReason = ''
} else global.db.data.users[sender] = {
afkTime: -1,
afkReason: '',
}

let chats = global.db.data.chats[from]
if (typeof chats !== 'object') global.db.data.chats[from] = {}
if (chats) {
if (!('mute' in chats)) chats.mute = false
if (!('antilink' in chats)) chats.antilink = false
if (!('antilinkv2' in chats)) chats.antilinkv2 = false
} else global.db.data.chats[from] = {
mute: false,
antilink: false,
antilinkv2: false
}

let setting = global.db.data.settings[isBot]
if (typeof setting !== 'object') global.db.data.settings[isBot] = {}
if (setting) {
if (!isNumber(setting.status)) setting.status = 0
if (!('autoread' in setting)) setting.autoread = false
} else global.db.data.settings[isBot] = {
status: 0,
autoread: false
}
} catch (err) {
console.error(err)
}

try {
ppuser = await venom.profilePictureUrl(sender, 'image')
} catch (err) {
ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'
}

if (!venom.public) {
if (!msg.key.fromMe && !isDono) return
}

if (msg.message) {
if (global.db.data.settings[isBot].autoread) {
venom.readMessages([msg.key])
}
}

function Criador() {
responder(resposta.dono)
}

const perfil = await getBuffer(ppuser)

if (!isGroup && isCmd && sender) {
console.log(cor, `\n`)
console.log(cor, `‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ`)
console.log(cor, `>„Äå ùòæùô§ùô¢ùôñùô£ùôôùô§ ùôÄùô¢ ùôãùôßùôûùô´ùôñùôôùô§ „Äç`)
console.log(cor, `> ‚îÇ `)
console.log(cor, `> ‚îÇ ùòæùô§ùô¢ùôñùô£ùôôùô§ : ${prefixo + comando}`)
console.log(cor, `> ‚îÇ ùôêùô®ùô™ùôñùôßùôûùô§ : ${sender.replace(/[^0-9]/g, '')}`)
console.log(cor, `> ‚îÇ ùôâùôûùôòùô† : ${nome}`)
console.log(cor, `> ‚îÇ ùôÉùô§ùôßùôñ : ${hora2}`)
console.log(cor, `> ‚îÇ ùôáùôöùô©ùôßùôñùô® : ${args.length}`)
console.log(cor, `> ‚îÇ `)
console.log(cor, `> ‚îî‚îÄ„Äå LITTLE BOT „Äç`)
console.log(cor, `‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ`)
}

if (!isGroup && !isCmd && sender) {
console.log(cor, `\n`)
console.log(cor, `‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ`)
console.log(cor, `>„Äå ùôàùôöùô£ùô®ùôñùôúùôöùô¢ ùôÄùô¢ ùôãùôßùôûùô´ùôñùôôùô§ „Äç`)
console.log(cor, `> ‚îÇ `)
console.log(cor, `> ‚îÇ ùôàùôöùô£ùô®ùôñùôúùôöùô¢ : ${body}`)
console.log(cor, `> ‚îÇ ùôêùô®ùô™ùôñùôßùôûùô§ : ${sender.replace(/[^0-9]/g, '')}`)
console.log(cor, `> ‚îÇ ùôâùôûùôòùô† : ${nome}`)
console.log(cor, `> ‚îÇ ùôÉùô§ùôßùôñ : ${hora2}`)
console.log(cor, `> ‚îÇ ùôáùôöùô©ùôßùôñùô® : ${body.length}`)
console.log(cor, `> ‚îÇ `)
console.log(cor, `> ‚îî‚îÄ„Äå LITTLE BOT „Äç`)
console.log(cor, `‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ`)
}

if (isGroup && isCmd && sender) {
console.log(cor, `\n`)
console.log(cor, `‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ`)
console.log(cor, `>„Äå ùòæùô§ùô¢ùôñùô£ùôôùô§ ùôÄùô¢ ùôÇùôßùô™ùô•ùô§ „Äç`)
console.log(cor, `> ‚îÇ `)
console.log(cor, `> ‚îÇ ùôÇùôßùô™ùô•ùô§ : ${groupName}`) 
console.log(cor, `> ‚îÇ ùòæùô§ùô¢ùôñùô£ùôôùô§ : ${prefixo + comando}`)
console.log(cor, `> ‚îÇ ùôêùô®ùô™ùôñùôßùôûùô§ : ${sender.replace(/[^0-9]/g, '')}`)
console.log(cor, `> ‚îÇ ùôâùôûùôòùô† : ${nome}`)
console.log(cor, `> ‚îÇ ùôÉùô§ùôßùôñ : ${hora2}`)
console.log(cor, `> ‚îÇ ùôáùôöùô©ùôßùôñùô® : ${args.length}`)
console.log(cor, `> ‚îÇ `)
console.log(cor, `> ‚îî‚îÄ„Äå LITTLE BOT „Äç`)
console.log(cor, `‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ`)
}

if (!isCmd && isGroup && sender) {
console.log(cor, `\n`)
console.log(cor, `‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ`)
console.log(cor, `>„Äå ùôàùôöùô£ùô®ùôñùôúùôöùô¢ ùôÄùô¢ ùôÇùôßùô™ùô•ùô§ „Äç`)
console.log(cor, `> ‚îÇ `)
console.log(cor, `> ‚îÇ ùôÇùôßùô™ùô•ùô§ : ${groupName}`) 
console.log(cor, `> ‚îÇ ùôàùôöùô£ùô®ùôñùôúùôöùô¢ : ${body}`)
console.log(cor, `> ‚îÇ ùôêùô®ùô™ùôñùôßùôûùô§ : ${sender.replace(/[^0-9]/g, '')}`)
console.log(cor, `> ‚îÇ ùôâùôûùôòùô† : ${nome}`)
console.log(cor, `> ‚îÇ ùôÉùô§ùôßùôñ : ${hora2}`)
console.log(cor, `> ‚îÇ ùôáùôöùô©ùôßùôñùô® : ${body.length}`)
console.log(cor, `> ‚îÇ `)
console.log(cor, `> ‚îî‚îÄ„Äå LITTLE BOT „Äç`)
console.log(cor, `‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ`)
}

//Anti Link 
if (db.data.chats[from].antilink) {
if (budy.match(`chat.whatsapp.com`)) {
responder(`„Äå ANTI LINK WHATSAPP „Äç\n\nVoc√™ foi detectado enviando um link de grupo, desculpe, voc√™ ser√° expulso do grupo!`)
let link = (`https://chat.whatsapp.com/` + await venom.groupInviteCode(from))
let linkdogrupo = new RegExp(link, 'i')
let nossogrupo = linkdogrupo.test(text)
if (nossogrupo) return responder(` Voc√™ enviou um link, n√£o irei remover pois √© o link do nosso grupo ‚úì`)
if (isAdmins) return responder(`Voc√™ √© o administrador ent√£o pode enviar links ‚úì`)
if (isDono) return responder(`Voce √© meu dono ent√£o pode enviar links ‚úì`)
venom.groupParticipantsUpdate(from, [sender], 'remove')
}
}

if (db.data.chats[from].antilinkv2) {
if (budy.match(`chat.whatsapp.com`)) {
responder(`„Äå ANTI LINK WHATSAPP „Äç\n\n*JANGAN SHARE GC LAIN!!!*`)
let link = (`https://chat.whatsapp.com/` + await venom.groupInviteCode(from))
let linkdogrupo = new RegExp(link, 'i')
let nossogrupo = linkdogrupo.test(text)
if (nossogrupo) return responder(` Voc√™ enviou um link, n√£o irei remover pois √© o link do nosso grupo ‚úì`)
if (isAdmins) return responder(`Voc√™ √© o administrador ent√£o pode enviar links ‚úì`)
if (isDono) return responder(`Voce √© meu dono ent√£o pode enviar links ‚úì`)
venom.sendMessage(from, { delete: from })
}
}

//mutar grupo 
if (db.data.chats[from].mute && !isAdmins && !isDono) {
return
}

switch (comando) {
case "menu": {
let menu = `
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑
> ‚òç *Usu√°rio :* ${sender.split("@")[0]}
> ‚òç *Modo :* ${venom.public ? `Publico` : `Privado`}
> ‚òç *Status :* ${isDono ? `Criador üî±` : `Usu√°rio Comum üòù`}
> ‚òç *Vip :* ${isVip ? `Sim ‚úÖ` : `Nao ‚ùå`}
> ‚òç *Hor√°rio :* ${hora2}
> ‚òç *Velocidade:* ${processo(process.uptime())}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑
‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ
> ‚ñß‚îÄ „Äå *C R E D I T O S* „Äç
> ‚îÇ ${prefixo}canal
> ‚îÇ ${prefixo}website
> ‚îÇ ${prefixo}painel 
> ‚îÇ ${prefixo}comprarbot
> ‚îÇ ${prefixo}insta 
> ‚îî‚îÄ‚îÄ¬∑¬∑¬∑
‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ
‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ
> ‚ñß‚îÄ „Äå *G R U P O* „Äç
> ‚îÇ ${prefixo}grupo *fechar/abrir*
> ‚îÇ ${prefixo}totag *texto*
> ‚îÇ ${prefixo}antilink *on/off*
> ‚îÇ ${prefixo}antilink2 *on/off*
> ‚îÇ ${prefixo}mutar *on/off*
> ‚îÇ ${prefixo}ban
> ‚îî‚îÄ‚îÄ¬∑¬∑¬∑
‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ
‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ
> ‚ñß‚îÄ „Äå *D O N O* „Äç
> ‚îÇ ${prefixo}addvip 
> ‚îÇ ${prefixo}delvip
> ‚îÇ ${prefixo}criptografar
> ‚îÇ ${prefixo}publico
> ‚îÇ ${prefixo}privado 
> ‚îÇ ${prefixo}visualizarmsg *on/off*
> ‚îÇ ${prefixo}convite *link*
> ‚îÇ ${prefixo}push *sua mensagem*
> ‚îî‚îÄ‚îÄ¬∑¬∑¬∑
‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ
> ¬© _Venom Mods_
> _Este bot ainda est√° em fase de desenvolvimento, por isso pedimos paci√™ncia se houver erros em alguma funcionalidade_
‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ`
venom.sendMessage(from, {
image: thumb, 
caption: menu,
mentions: [sender],
contextInfo: {
externalAdReply: {
showAdAttribution: true, 
title: `${dizendoTempo} ${nome}`,
thumbnail: thumb,
sourceUrl: "https://chat.whatsapp.com/Eig4z1Oar9C9Yl58ro7T3n",
mediaType: 1,
renderLargerThumbnail: false
}
}
},{quoted: msg})
}
break

case 'painel': 
venom.sendMessage(from, {
image: {url: './dados/imagem/painel.jpg'},
caption: painel
},{quoted: msg})
break

case 'website':
venom.sendMessage(from, {
image: {url: './dados/imagem/website.jpg'},
caption: website
},{quoted: msg})
break

case 'canal': 
responder(`Aqui est√° no canal do meu criador!\n\nhttps://youtube.com/@VenomModsss`)
break

case 'comprarbot':
venom.sendMessage(from, {
image: {url: './dados/imagem/comprarbot.jpg'},
caption: comprarbot
},{quoted: msg})
break 

case 'insta':
responder(`Aqui est√° o Instagram do meu criador venom ‚úì\n\nhttps://instgram.com/venom_mods_ofc`)
break

case 'addvip': {
if (!isDono) return responder(resposta.dono)
if(!q) return responder(`Digite o n√∫mero do usu√°rio que voc√™ deseja adicionar como vip!\n\nExemplo: ${prefixo + comando} 5597984388522`)
const numerovip = q.replace(/[^0-9]/g, '');
// Chama a fun√ß√£o para adicionar um usu√°rio VIP
adicionarUsuarioVIP(`${numerovip + "@s.whatsapp.net"}`);
}
break

case 'delvip': {
if (!isDono) return responder(resposta.dono)
if(!q) return responder(`Digite o n√∫mero do usu√°rio que voc√™ deseja deletar como vip!\n\nExemplo: ${prefixo + comando} 5597984388522`)
const numerovip = q.replace(/[^0-9]/g, '');
// Chama a fun√ß√£o para adicionar um usu√°rio VIP
deletarUsuarioVIP(`${numerovip + "@s.whatsapp.net"}`);
}
break 

case "publico": {
if (!isDono) return Criador()
venom.public = true
responder(`_*Todos podem usar os comandos do bot agora ‚úì*_`)
}
break

case "privado": {
if (!isDono) return Criador()
venom.public = false
responder(`_*Bot privado somente meu dono pode usar os conandos agora ‚úì*_`)
}
break

case 'visualizamsg':
if (!isDono) return responder(resposta.dono)
if (args.length < 1) return responder(`_Use o comando corretamente: ${prefixo + comando} on/off_`)
if (q === 'on'){
global.db.data.settings[NomeBot].autoread = true
responder(`_Auto visualiza√ß√£o de mensagem ${q}_`)
} else if (q === 'off'){
global.db.data.settings[NomeBot].autoread = false
responder(`_Auto visualiza√ß√£o de mensagem ${q}_`)
}
break

case 'dono': {
const vcard =
'BEGIN:VCARD\n' + 
'VERSION:3.0\n' +
`FN:${nomedono}\n` + 
`ORG:${nomebot};\n` + 
`TEL;type=MSG;type=CELL;type=VOICE;waid=${dono}:+${dono}\n` + // WhatsApp ID + phone number
'END:VCARD'
			venom.sendMessage(from, {
contacts: {
	displayName: nomedono,
	contacts: [{ vcard }],
},
			}, { quoted: fkontak})
 }
break

case 'mutar': {
if (!isGroup) return responder(resposta.grupo)
if (!isAdmins && !isDono) return responder(resposta.admin)
if (args[0] === "on") {
if (db.data.chats[from].mute) return responder(`Anteriormente esse comando ja est√° ativo ‚úì`)
db.data.chats[from].mute = true
responder(`_bot foi silenciados neste grupo com sucesso ‚úì_`)
} else if (args[0] === "off") {
if (!db.data.chats[from].mute) return responder(`Anteriormente j√° est√° desativado ‚úì`)
db.data.chats[from].mute = false
responder(`_O bot foi ativado neste grupo com sucesso ‚úì_`)
}
}
break

case 'antilink': {
if (!isGroup) return responder(resposta.grupo)
if (!isAdmins && !isDono) return responder(resposta.admin)
if (args[0] === "on") {
if (db.data.chats[from].antilink) return responder(`_antilink ja est√° ativado!_`)
db.data.chats[from].antilink = true
responder(`_Antilink ativado com sucesso ‚úì_`)
} else if (args[0] === "off") {
if (!db.data.chats[from].antilink) return responder(`_Antilink ja est√° desativado!_`)
db.data.chats[from].antilink = false
responder(`_Antilink desativado com sucesso ‚úì_`)
}
}
break

case 'antilink2':
if (!isGroup) return responder(resposta.grupo)
if (!isAdmins && !isDono) return responder(resposta.admin)
if (args.length < 1) return responder(`_Use o comando corretamente: ${prefixo + comando} on/off_`)
if (q == 'on'){
global.db.data.chats[from].antilinkv2 = true
responder(`_Antilink v2 ativado com sucesso ‚úì_`)
} else if (q == 'off'){
global.db.data.chats[from].antilinkv2 = false
responder(`_Antilink v2 desativado com sucesso ‚úì_`)
}
break

case 'kick':
case 'ban': {
if (!isGroup) return responder(resposta.grupo)
if (!isAdmins && !isDono) return responder(resposta.admin)
let users = msg.mentionedJid ? msg.mentionedJid : msg.quoted ? msg.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
await venom.groupParticipantsUpdate(from, [users], 'remove')
}
break

case 'grupo':
case 'group':
case 'grup': {
if (!isGroup) return responder(resposta.grupo)
if (!isAdmins && !isDono) return responder(resposta.admin)
if (args[0] === 'fechar') {
await venom.groupSettingUpdate(from, 'announcement').then((res) => responder(`_Grupo fechado com sucesso ‚úì_`)).catch((err) => console.log(jsonformat(err)))
} else if (args[0] === 'abrir') {
await venom.groupSettingUpdate(from, 'not_announcement').then((res) => responder(`_Grupo aberto com sucesso ‚úì_`)).catch((err) => console.log(jsonformat(err)))
} else {
responder(`_Como usar o comando corretamente!_\n\nDigite ${prefixo + comando} fechar/abrir`)
}
}
break

case 'totag':
case 'hidetag': {
if (!isGroup) return responder(resposta.grupo)
if (!isAdmins && !isDono) return responder(resposta.admin)
venom.sendMessage(from, {
text: q ? q : '',
mentions: participants.map(a => a.id)
}, {
quoted: msg
})
}
break

case 'puash_ctt':
case 'push': {
if (!text) return responder(`_Use o comando corretamente: ${prefixo}${comando} Salva ai Venom Mods_`)
if (!isDono) return responder(resposta.dono)
let get = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id);
let count = get.length;
let sentCount = 0;

for (let i = 0; i < get.length; i++) {
setTimeout(function() {
venom.sendMessage(get[i], { text: text });
count--;
sentCount++;
if (count === 0) {
 responder(`_Mensagem enviada com sucesso‚úì_\n*_Para:_* *_${sentCount} Contatos_*`);
}
}, i * 1000); //atrasa cada envio por 1 segundo
}
}
break

case 'cript':
case 'criptografar':
case 'enc': {
if (!isDono) return responder(resposta.dono)
if (!q) return responder(`_Use o comando corretamente ${prefixo+comando} const venom = require('venom-bot')_`)
let meg = await criptografia(q)
responder(`${meg.result}`)
}
break

case "join": {
if (!isDono) return Criador()
if (!text) return responder(`_Use o comando corretamente: ${prefixo+comando} link do grupo_`)
if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return responder('Link do grupo Invalido!')
let result = args[0].split('https://chat.whatsapp.com/')[1]
await venom.groupAcceptInvite(result).then((res) => responder(util.format(res))).catch((err) => responder(util.format(err)))
}
break

default:
}
if (budy.startsWith('>')) {
if (!isOwner) return Criador()
try {
let evaled = await eval(budy.slice(2))
if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
await responder(evaled)
} catch (err) {
responder(String(err))
}
}

if (isCmd && budy.toLowerCase() != undefined) {
if (from.endsWith('broadcast')) return
if (msg.isBaileys) return
let msgs = global.db.data.database
if (!(budy.toLowerCase() in msgs)) return
venom.copyNForward(from, msgs[budy.toLowerCase()], true)
}
} catch (err) {
console.log(util.format(err))
}
}

let arquivo = require.resolve(__filename) 
fs.watchFile(arquivo, () => {
fs.unwatchFile(arquivo)
console.log(chalk.redBright(`Arquivo atualizado ${__filename}`))
delete require.cache[arquivo]
require(arquivo)
})